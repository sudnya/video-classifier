#! /usr/bin/python

################################################################################
#    \file   SConscript
#    \author Gregory Diamos <solusstultus@gmail.com>
#    \date   Saturday August 10, 2013
#    \brief  The SCons master build script for the image classifier
################################################################################

def toSharedObject(filename):
    (root, ext) = os.path.splitext(str(filename))
    return root + '.os'

# set environment variables
lucius_args = ARGUMENTS
lucius_cmd_line_targets = COMMAND_LINE_TARGETS
lucius_path_to_root_dir = ".."

# try to import an environment
exec open(lucius_path_to_root_dir + "/scripts/which.py")
env = BuildEnvironment()
env['LUCIUS_PATH'] = Dir('.').abspath

env['path_to_root_dir'] = os.path.abspath(lucius_path_to_root_dir)

# find all source files in the source tree
directories = ['lucius/audio', 'lucius/driver', 'lucius/util', 'lucius/engine',
    'lucius/matrix', 'lucius/matrix/ctc', 'lucius/model', 'lucius/network', 'lucius/configuration',
    'lucius/optimizer', 'lucius/parallel', 'lucius/video', 'lucius/visualization',
    'lucius/database', 'lucius/input', 'lucius/results', 'lucius/api', 'lucius/text',
    'lucius/ir', 'lucius/ir/types', 'lucius/ir/target', 'lucius/ir/values', 'lucius/ir/ops',
    'lucius/runtime', 'lucius/analysis', 'lucius/lazy-ir', 'lucius/optimization']

source_directories = [os.path.join(i, 'implementation') for i in directories]

cuda_source_directories = [os.path.join(i, 'cuda-implementation') for i in directories]

# CUDA needs this to support device libraries
env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
extensions = ['*.cpp']

sources = []
for dir in source_directories:
    for ext in extensions:
        regexp = os.path.join(dir, ext)
        sources.extend(env.Glob(regexp))

cuda_object_sources = []
for dir in cuda_source_directories:
    for ext in extensions:
        regexp = os.path.join(dir, '*.cu')
        cuda_sources = env.Glob(regexp)
        for cuda_source in cuda_sources:
            cuda_object_sources.append(env.CUDADeviceSharedObject(cuda_source))

libculucius = env.CUDADeviceLibrary('culucius', cuda_object_sources, LIBS=env['EXTRA_LIBS'])
sources.append(libculucius)
if cuda_exists(env):
    sources.append(cuda_object_sources)

# create the library
liblucius = env.SharedLibrary('lucius', sources, LIBS=env['EXTRA_LIBS'],
    LINKFLAGS=env['LINKFLAGS'] + getSharedLibraryLINKFLAGS('liblucius'))
lucius_libs = ['lucius'] + env['EXTRA_LIBS']

if env['install']:
    liblucius = env.Install(os.path.join(env['install_path'], "lib"),
        liblucius)

env['LUCIUS_LIBS'] = lucius_libs

# create the programs
programs = []

programs.extend(SConscript('lucius/SConscript',    exports='env'))
programs.extend(SConscript('benchmarks/SConscript', exports='env'))
programs.extend(SConscript('demos/SConscript', exports='env'))

for program in programs:
    env.Depends(program, liblucius)

# install it all
if env['install']:
    installed   = []
    executables = []

    print 'Installing Lucius'

    for program in programs:
        executables.append(env.Install(
            os.path.join(env['install_path'], "bin"), program))

    # install headers
    header_directories = [os.path.join(i, 'interface') for i in directories]
    header_extensions = ['*.h']

    headers = []
    for dir in header_directories:
        for ext in header_extensions:
            regexp = os.path.join(dir, ext)
            headers.extend(env.Glob(regexp))

    for header in headers:
        (directoryPath, headerName) = os.path.split( \
            os.path.relpath(str(header), env['path_to_root_dir']))
        installed.append(env.Install(os.path.join( \
            env['install_path'], "include", directoryPath), header))

    # install python
    python_directories = ['python']
    python_extensions  = ['*.py']

    python_files = []
    for dir in python_directories:
        for ext in python_extensions:
            regexp = os.path.join(dir, ext)
            python_files.extend(env.Glob(regexp))

    for python_file in python_files:
        (directoryPath, fileName) = os.path.split( \
            os.path.relpath(str(python_file), env['path_to_root_dir']))
        installed.append(env.Install(os.path.join( \
            env['install_path'], directoryPath), python_file))


    # set permissions
    for i in executables:
        env.AddPostAction(i, Chmod(i, 0755))
    for i in installed:
        env.AddPostAction(i, Chmod(i, 0644))

    # Run the install rules by default
    install_alias = env.Alias('install', env['install_path'])
    Default(install_alias)




